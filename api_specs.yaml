openapi: 3.0.0
info:
  title: Straw Hat Team Comprehensive API
  version: 1.0.0
  description: API for a full-featured Product/SaaS platform including authentication, payments, user management, and more.

paths:
  # Authentication

  /auth/register:
    post:
      summary: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/login:
    post:
      summary: Log in a user and generate access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/social/{provider}/callback:
    get:
      summary: Handle callback from social authentication provider
      tags:
        - Authentication
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum: [google, facebook, twitter]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
      responses:
        '200':
          description: Successful callback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/magic-link:
    post:
      summary: Send a magic link for passwordless authentication
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkRequest'
      responses:
        '200':
          description: Magic link sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/magic-link/verify:
    get:
      summary: Verify magic link authentication
      tags:
        - Authentication
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
          description: The magic link token to verify
      responses:
        '200':
          description: Magic link verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkUnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/change-password:
    post:
      summary: Change logged in user password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetUnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /auth/forgot-password:
    post:
      summary: Request password reset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not found - Email not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Invite Flow
  /invite:
    post:
      summary: Invite a user
      tags:
        - Invite Flow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
      responses:
        '200':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedEmailError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /invite/{token}/accept:
    get:
      summary: Accept an invitation with a token
      tags:
        - Invite Flow
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: The invitation token to accept
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteSuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedTokenError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Export

  /export:
    get:
      summary: Export user data
      tags:
        - User Data Management
      responses:
        '200':
          description: Successful export
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized - Authentication failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Notifications

  /notifications:
    get:
      summary: Get all notifications
      tags:
        - Notifications
      responses:
        '200':
          description: Successful retrieval of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

    post:
      summary: Create a notification
      tags:
        - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /notifications/{id}:
    put:
      summary: Update notification by ID
      tags:
        - Notifications
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the notification to update
        - in: query
          name: status
          required: true
          schema:
            type: string
          description: New status of the notification (e.g., read, unread)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Updated message content of the notification
      responses:
        '200':
          description: Notification updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUpdateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

    delete:
      summary: Delete a notification by ID
      tags:
        - Notifications
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the notification to delete
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Notification deleted successfully.'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

    # Blog

  /blogs:
    get:
      summary: Fetch all blogs
      tags:
        - Blog
      responses:
        '200':
          description: Successful fetch
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

    post:
      summary: Create a new blog post
      tags:
        - Blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostRequest'
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Conflict - Blog post already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /blog/{id}:
    get:
      summary: Retrieve a single blog post
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the blog post to retrieve
      responses:
        '200':
          description: Blog post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      summary: Update a single blog post
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the blog post to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostUpdateRequest'
      responses:
        '200':
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogNotFoundError'
        '409':
          description: Conflict - Input conflicts with existing data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Delete a single blog post
      tags:
        - Blog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the blog post to delete
      responses:
        '204':
          description: Blog post deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Blog post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Invite Mgt
  /invite-links:
    get:
      summary: Retrieve all invite links
      tags:
        - Invite Management
      responses:
        '200':
          description: Successfully retrieved invite links
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      summary: Create a new invite link
      tags:
        - Invite Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInviteLinkRequest'
      responses:
        '201':
          description: Successfully created invite link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinkResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericUnauthorizedError'
        '409':
          description: Conflict - Invite link already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /invite-links/{id}:
    get:
      summary: Get an invite link by ID
      tags:
        - Invite Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the invite link to retrieve
      responses:
        '200':
          description: Invite link retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleInviteLinkResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Invite link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinkNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      summary: Update an invite link by ID
      tags:
        - Invite Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the invite link to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInviteLinkRequest'
      responses:
        '200':
          description: Invite link updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleInviteLinkResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Invite link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinkNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Delete an invite link by ID
      tags:
        - Invite Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the invite link to delete
      responses:
        '204':
          description: Invite link deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Invite link not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinkNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'


  # User Management
  /users:
    get:
      summary: List users (for admin)
      tags:
        - User Management
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      summary: Create a new user (for admin)
      tags:
        - User Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{id}:
    get:
      summary: Get user details
      tags:
        - User Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      summary: Update user details
      tags:
        - User Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      summary: Delete a user
      tags:
        - User Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  # Organization Management
  /orgs:
    get:
      summary: List organizations
      tags:
        - Organization Management
      responses:
        '200':
          description: A list of all organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
    post:
      summary: Create a new organization
      tags:
        - Organization Management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '200':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'

  /orgs/{id}:
    get:
      summary: Get organization details
      tags:
        - Organization Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    put:
      summary: Update organization details
      tags:
        - Organization Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    delete:
      summary: Delete an organization
      tags:
        - Organization Management
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Organization deleted successfully

  # Superadmin Interface
  /admin/users:
    get:
      summary: List all users (admin)
      tags:
        - Superadmin Interface
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
  /admin/users/{id}:
    get:
      summary: Get user details (admin)
      tags:
        - Superadmin Interface
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /admin/orgs:
    get:
      summary: List all organizations (admin)
      tags:
        - Superadmin Interface
      responses:
        '200':
          description: List of all organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
  /admin/orgs/{id}:
    get:
      summary: Get organization details (admin)
      tags:
        - Superadmin Interface
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
  /admin/payments:
    get:
      summary: List all payments (admin)
      tags:
        - Superadmin Interface
      responses:
        '200':
          description: List of all payments
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /admin/activity-logs:
    get:
      summary: List all activity logs (admin)
      tags:
        - Superadmin Interface
      responses:
        '200':
          description: List of all activity logs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  # Settings and Profile
  /settings:
    get:
      summary: Get settings
      tags:
        - Settings and Profile
      responses:
        '200':
          description: Settings details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
    post:
      summary: Create settings
      tags:
        - Settings and Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSettingsRequest'
      responses:
        '201':
          description: Settings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
  /settings/{id}:
    put:
      summary: Update settings
      tags:
        - Settings and Profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
    delete:
      summary: Delete settings
      tags:
        - Settings and Profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Settings deleted successfully
  /profile/settings:
    get:
      summary: Get profile settings
      tags:
        - Settings and Profile
      responses:
        '200':
          description: Profile settings details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSettingsResponse'
    put:
      summary: Update profile settings
      tags:
        - Settings and Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileSettingsRequest'
      responses:
        '200':
          description: Profile settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileSettingsResponse'

  # Landing and Static Pages
  /:
    get:
      summary: Get landing page
      tags:
        - Landing and Static Pages
      responses:
        '200':
          description: Landing page content
          content:
            text/html:
              schema:
                type: string
  /privacy-policy:
    get:
      summary: Get privacy policy page
      tags:
        - Landing and Static Pages
      responses:
        '200':
          description: Privacy policy page content
          content:
            text/html:
              schema:
                type: string
  /about-us:
    get:
      summary: Get about us page
      tags:
        - Landing and Static Pages
      responses:
        '200':
          description: About us page content
          content:
            text/html:
              schema:
                type: string
  /contact-us:
    get:
      summary: Get contact us page
      tags:
        - Landing and Static Pages
      responses:
        '200':
          description: Contact us page content
          content:
            text/html:
              schema:
                type: string

  # Payments

  /payments/stripe/create:
    post:
      summary: Create a payment using Stripe
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripePaymentRequest'
      responses:
        '200':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripePaymentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'The request was unacceptable, often due to missing a required parameter.'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'No valid API key provided.'
        '402':
          description: Request Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'The parameters were valid but the request failed.'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'The API key doesn’t have permissions to perform the request.'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'The requested resource doesn’t exist.'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'The request conflicts with another request (perhaps due to using the same idempotent key).'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Something went wrong on Stripe’s end. (These are rare.)'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Something went wrong on Stripe’s end. (These are rare.)'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Something went wrong on Stripe’s end. (These are rare.)'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Something went wrong on Stripe’s end. (These are rare.)'

  /payments/stripe/{id}:
    get:
      summary: Fetch a Stripe transaction
      tags:
        - Payments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Stripe transaction to fetch
      responses:
        '200':
          description: Transaction fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StripePaymentTransactionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /payments/stripe/cancel/{id}:
    get:
      summary: Cancel a previously created payout if its status is pending
      tags:
        - Payments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Stripe transaction to fetch
      responses:
        '200':
          description: Transaction cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /payments/flutterwave/create:
    post:
      summary: Create a transaction via Flutterwave
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlutterwavePaymentRequest'
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlutterwaveTransactionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /payments/flutterwave/{id}:
    get:
      summary: Fetch a transaction by ID from Flutterwave
      tags:
        - Payments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the transaction to fetch
      responses:
        '200':
          description: Transaction details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlutterTransactionDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlutterwaveNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /payments/flutterwave/cancel/{id}:
    get:
      summary: Cancel a previously created payout if its status is pending
      tags:
        - Payments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the Flutterwave transaction to fetch
      responses:
        '200':
          description: Transaction cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlutterCancelledTransactionDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlutterwaveNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Messaging

  /email/send:
    post:
      summary: Send an email using a predefined template
      tags:
        - Messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailRequest'
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Conflict - Input conflict error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /email/templates:
    get:
      summary: Get all email templates
      tags:
        - Messaging
      responses:
        '200':
          description: Successful retrieval of email templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplatesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      summary: Create a new email template
      tags:
        - Messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailTemplateRequest'
      responses:
        '201':
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmailTemplateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Input conflict error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /email/templates/{id}:
    get:
      summary: Get an email template by ID
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the email template
      responses:
        '200':
          description: Successful retrieval of email template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      summary: Update an email template by ID
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the email template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplateUpdateRequest'
      responses:
        '200':
          description: Successful update of email template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      summary: Delete an email template by ID
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the email template
      responses:
        '204':
          description: Successful deletion of email template
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

 

  # Dashboard Data
  /dashboard:
    get:
      summary: Get dashboard data
      tags:
        - Dashboard
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
  /dashboard/widgets:
    get:
      summary: List dashboard widgets
      tags:
        - Dashboard
      responses:
        '200':
          description: List of dashboard widgets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetListResponse'
  /dashboard/widgets/{id}:
    get:
      summary: Get widget details
      tags:
        - Dashboard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Widget details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetResponse'

  # Waitlist Management
  /waitlist:
    get:
      summary: List waitlist entries
      tags:
        - Waitlist
      responses:
        '200':
          description: List of waitlist entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WaitlistListResponse'
    post:
      summary: Create a new waitlist entry
      tags:
        - Waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWaitlistRequest'
      responses:
        '201':
          description: Waitlist entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WaitlistResponse'
  /waitlist/{id}:
    delete:
      summary: Delete a waitlist entry
      tags:
        - Waitlist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Waitlist entry deleted successfully

  # Marketing Page
  /squeeze:
    get:
      summary: Get marketing page content
      tags:
        - Marketing Page
      responses:
        '200':
          description: Marketing page content
          content:
            text/html:
              schema:
                type: string
    post:
      summary: Create marketing page content
      tags:
        - Marketing Page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMarketingPageRequest'
      responses:
        '201':
          description: Marketing page content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketingPageResponse'
  

  # Language and Region Settings
  /settings/language:
    get:
      tags:
        - Language and Region Settings
      summary: Get language settings
      responses:
        '200':
          description: Language settings details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      tags:
        - Language and Region Settings
      summary: Create language settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLanguageSettingsRequest'
      responses:
        '201':
          description: Language settings created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /settings/language/{id}:
    put:
      tags:
        - Language and Region Settings
      summary: Update language settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguageSettingsRequest'
      responses:
        '200':
          description: Language settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageSettingsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
    delete:
      tags:
        - Language and Region Settings
      summary: Delete language settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Language settings deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
        
  # Email Template Management
  /admin/email-templates:
    get:
      tags:
        - Email Template Management
      summary: List email templates
      responses:
        '200':
          description: A list of email templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      tags:
        - Email Template Management
      summary: Create a new email template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailTemplateRequest'
      responses:
        '201':
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /admin/email-templates/{id}:
    put:
      tags:
        - Email Template Management
      summary: Update email template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailTemplateRequest'
      responses:
        '200':
          description: Email template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
    delete:
      tags:
        - Email Template Management
      summary: Delete email template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Email template deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
        
  # Activity Log
  /activity-logs:
    get:
      tags:
        - Activity Log
      summary: List all activity logs
      responses:
        '200':
          description: A list of activity logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLogListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  # Push Notifications
  /push-notifications:
    get:
      tags:
        - Push Notifications
      summary: List all push notifications
      responses:
        '200':
          description: A list of push notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    post:
      tags:
        - Push Notifications
      summary: Create a new push notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePushNotificationRequest'
      responses:
        '201':
          description: Push notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /push-notifications/{id}:
    put:
      tags:
        - Push Notifications
      summary: Update push notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePushNotificationRequest'
      responses:
        '200':
          description: Push notification updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'
    delete:
      tags:
        - Push Notifications
      summary: Delete push notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Push notification deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateNotFoundError'

components:
  schemas:
    #Errors
    BadRequestError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: field_name
              message:
                type: string
                example: 'Error message for bad request.'

    InputConflictError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: 'User with email address already exists.'

    ConflictError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: field_name
              message:
                type: string
                example: 'Conflict error message.'

    TemplateConflictError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: templateId
              message:
                type: string
                example: 'Template ID conflict.'

    NotFoundError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: 'Email not found.'

    TemplateNotFoundError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: resource_id
              message:
                type: string
                example: 'Resource not found.'

    InternalServerError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: server
              message:
                type: string
                example: 'Internal server error.'

    UnauthorizedError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email or password
              message:
                type: string
                example: 'Invalid credentials.'

    MagicLinkUnauthorizedError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: token
              message:
                type: string
                example: 'Invalid Verifcation Token.'

    PasswordResetUnauthorizedError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: old password
              message:
                type: string
                example: 'Invalid credentials.'

    # Authentication
    RegisterRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        password:
          type: string
          format: password
          example: $trongPassword123

    RegisterResponse:
      type: object
      properties:
        userId:
          type: string
          example: 1a2b3c4d5e6f7g8h9i0j
        firstName:
          type: string
          format: string
          example: john
        lastName:
          type: string
          format: string
          example: doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        userId:
          type: string
          example: 1a2b3c4d5e6f7g8h9i0j
        firstName:
          type: string
          format: string
          example: John
        lastName:
          type: string
          format: string
          example: Doe
        uniqueId:
          type: string
          example: john_doe-123
        email:
          type: string
          format: email
          example: johndoe@example.com
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    SocialLoginRequest:
      type: object
      properties:
        token:
          type: string

    MagicLinkRequest:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com

    MagicLinkResponse:
      type: object
      properties:
        message:
          type: string
          example: Magic link sent to your email.

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          example: $trongPassword123
        newPassword:
          type: string
          example: $newStrongPassword123
        confirmNewPassword:
          type: string
          example: $newStrongPassword123

    ChangePasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: Password updated successfully.

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: email
          example: johndoe@example.com

    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
          example: Password reset link sent to your email.

    RefreshTokenRequest:
      type: object

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    # User Management
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'

    # Organization Management
    CreateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
    OrganizationResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
    OrganizationListResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'

    # Payments
    StripePaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string
    FlutterwavePaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string
    LemonSqueezyPaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string

    # Messaging

    SendEmailRequest:
      type: object
      properties:
        recipient:
          type: string
          example: user@example.com
        subject:
          type: string
          example: 'Welcome to Our Service'
        templateId:
          type: integer
          example: 1
        data:
          type: object
          additionalProperties:
            type: string

    SendEmailResponse:
      type: object
      properties:
        messageId:
          type: string
          example: '1234567890abcdef'
        status:
          type: string
          example: 'Message sent successfully'

    EmailTemplatesResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: 'Welcome Email'
              subject:
                type: string
                example: 'Welcome to Our Service'
              body:
                type: string
                example: '<p>Hello, welcome to our service!</p>'

    CreateEmailTemplateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
      required:
        - name
        - subject
        - body

    CreateEmailTemplateResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time

    EmailTemplate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        subject:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    EmailTemplateUpdateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string

    # CreateEmailTemplateRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #     subject:
    #       type: string
    #     body:
    #       type: string
    # UpdateEmailTemplateRequest:
    #   type: object
    #   properties:
    #     name:
    #       type: string
    #     subject:
    #       type: string
    #     body:
    #       type: string
    # EmailTemplateResponse:
    #   type: object
    #   properties:
    #     id:
    #       type: string
    #     name:
    #       type: string
    #     subject:
    #       type: string
    #     body:
    #       type: string
    # EmailTemplateListResponse:
    #   type: object
    #   properties:
    #     templates:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/EmailTemplateResponse'

    # Settings
    CreateSettingsRequest:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    UpdateSettingsRequest:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    SettingsResponse:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        value:
          type: string

    # Profile Settings
    UpdateProfileSettingsRequest:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProfileSettingsResponse:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    # Contact Form
    ContactFormRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        message:
          type: string

    # GDPR
    ConsentRequest:
      type: object
      properties:
        consent:
          type: string

    # Dashboard
    DashboardResponse:
      type: object
      properties:
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResponse'
    WidgetListResponse:
      type: object
      properties:
        widgets:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResponse'
    WidgetResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        data:
          type: object

    #Invite

    InviteRequest:
      type: object
      properties:
        email:
          type: string
          format: email

    InviteRespnse:
      type: object
      properties:
        message:
          type: string
          example: 'Invite sent successfully.'

    UnauthorizedEmailError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: 'Invalid credentials.'

    UnauthorizedTokenError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: token
              message:
                type: string
                example: 'Invalid credentials.'

    InviteSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Invitation accepted successfully

    # User Data Management

    ExportResponse:
      type: object
      properties:
        downloadUrl:
          type: string
          format: uri
          example: https://example.com/export/download/data.zip

    GenericUnauthorizedError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: field_name
              message:
                type: string
                example: 'Unauthorized error message.'

    # notifications

    NotificationResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        message:
          type: string
          example: Notification message content
        createdAt:
          type: string
          format: date-time
          example: '2024-07-15T10:30:00Z'

    NotificationRequest:
      type: object
      properties:
        userId:
          type: string
        message:
          type: string

    NotificationCreateResponse:
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d5e6f7g8h9i0j
        message:
          type: string
          example: 'Notification message'

    NotificationUpdateResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        message:
          type: string
          example: You have a new message
        status:
          type: string
          example: read

    NotificationNotFoundError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: notification_id
              message:
                type: string
                example: 'Notification not found.'

    # Blog

    BlogsResponse:
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d5e6f7g8h9i0j
        author:
          type: string
          example: John Doe
        title:
          type: string
          example: My First Blog
        textContent:
          type: string
          example: This is the content of my first blog.
        imageContent:
          type: string
          example: image_url.jpg
        created_at:
          type: string
          format: date-time
          example: 2024-07-13T14:20:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-07-13T15:30:00Z

    BlogPostRequest:
      type: object
      properties:
        title:
          type: string
        textContent:
          type: string
        imageContent:
          type: string
        authorId:
          type: string

    BlogPostRespnse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        textContent:
          type: string
        imageContent:
          type: string
        authorId:
          type: string
        createdAt:
          type: string
          format: date-time

    BlogNotFoundError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: id
              message:
                type: string
                example: 'Blog post not found.'

    BlogPostUpdateRequest:
      type: object
      properties:
        title:
          type: string
        textContent:
          type: string
        imageContent:
          type: string

    # Invite Mgt

    InviteLinksResponse:
      type: object
      properties:
        inviteLinks:
          type: array
          items:
            $ref: '#/components/schemas/InviteLink'
    CreateInviteLinkRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          example: admin
    InviteLinkResponse:
      type: object
      properties:
        id:
          type: string
          example: 1a2b3c4d5e6f7g8h9i0j
        email:
          type: string
          format: email
          example: user@example.com
        role:
          type: string
          example: admin
        token:
          type: string
          example: abcdef123456
    InviteLink:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string
        token:
          type: string
    SingleInviteLinkResponse:
      type: object
      properties:
        id:
          type: string
        link:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    UpdateInviteLinkRequest:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
    InviteLinkNotFoundError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: id
              message:
                type: string
                example: 'Invite link not found.'


    # Waitlist
    CreateWaitlistRequest:
      type: object
      properties:
        email:
          type: string
          format: email
    WaitlistResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    WaitlistListResponse:
      type: object
      properties:
        waitlist:
          type: array
          items:
            $ref: '#/components/schemas/WaitlistResponse'

    # Marketing Page
    CreateMarketingPageRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    MarketingPageResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string

    # Invite System
    CreateInviteRequest:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
    InviteListResponse:
      type: object
      properties:
        invites:
          type: array
          items:
            $ref: '#/components/schemas/InviteResponse'
    InviteResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string

    # User Associated Data
    CreateUserDataRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: object
    UpdateUserDataRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: object
    UserDataResponse:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        data:
          type: object
    UserDataListResponse:
      type: object
      properties:
        userData:
          type: array
          items:
            $ref: '#/components/schemas/UserDataResponse'

    # Search and Sort
    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object

    # Analytics
    ChartDataResponse:
      type: object
      properties:
        chartData:
          type: object

    

    # Blog
    CreateBlogPostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    UpdateBlogPostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    BlogPostResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
    BlogPostListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostResponse'

    LanguageSettingsResponse:
      type: object
      properties:
        id:
          type: string
        language:
          type: string
        region:
          type: string
    CreateLanguageSettingRequest:
      type: object
      properties:
        language:
          type: string
        region:
          type: string
    UpdateLanguageSettingRequest:
      type: object
      properties:
        language:
          type: string
        region:
          type: string

    EmailTemplateListResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/EmailTemplateResponse'
    CreateEmailTemplateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
    UpdateEmailTemplateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
    EmailTemplateResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        body:
          type: string

    ActivityLogListResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            type: object

    PushNotificationListResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/PushNotificationResponse'
    CreatePushNotificationRequest:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
    UpdatePushNotificationRequest:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
    PushNotificationResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
